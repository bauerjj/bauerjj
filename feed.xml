<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.5">Jekyll</generator><link href="https://bauerjj.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bauerjj.github.io/" rel="alternate" type="text/html" /><updated>2017-08-16T20:51:06-07:00</updated><id>https://bauerjj.github.io/</id><title type="html">bauerjj.com</title><subtitle>Thoughts on my mind - blog - website - random</subtitle><author><name>Justin Bauer</name><email>justinjbauer1@gmail.com</email><uri>http://mcuhq.com</uri></author><entry><title type="html">Automate Jekyll Production</title><link href="https://bauerjj.github.io/blog/automate-jekyll-production/" rel="alternate" type="text/html" title="Automate Jekyll Production" /><published>2017-07-27T00:00:00-07:00</published><updated>2017-07-27T00:00:00-07:00</updated><id>https://bauerjj.github.io/blog/automate-jekyll-production</id><content type="html" xml:base="https://bauerjj.github.io/blog/automate-jekyll-production/">&lt;p&gt;The main benefit I see of using jekyll is being able to edit a plain markdown file and have it appear live on the Internet in just a few seconds. In order for this to happen, I have to perform the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make an edit&lt;/li&gt;
  &lt;li&gt;Build the website&lt;/li&gt;
  &lt;li&gt;Commit and push the changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;Copy the contents under &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; folder into the &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CD&lt;/code&gt; into the production-ready folder&lt;/li&gt;
  &lt;li&gt;Commit and push the changes to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;Wait 5 seconds for github to publish the changes live on github.io.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I wanted a way to automate this.&lt;/p&gt;

&lt;p&gt;I have to perform the above steps since I am using &lt;a href=&quot;https://github.com/ayastreb/jekyll-maps&quot;&gt;jekyll-maps&lt;/a&gt; which is not one of the &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;approved plugins&lt;/a&gt; that I can use on github pages. This forces me to NOT have github automatically build my jekyll site. I must therefore upload all of the static HTML content on my master branch and have my source files in a &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch. Github pages will serve the static content from the master branch live for you for free!&lt;/p&gt;

&lt;p&gt;I created two folders, one for production and one for source edits. I did the following after already creating the gh-pages branch previously:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/Documents/github&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir production source&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd production; git pull &amp;lt;my_git_repo&amp;gt;.git; git checkout master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ../source; git pull &amp;lt;my_git_repo&amp;gt;.git; git checkout gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have already forked a &lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;jekyll theme&lt;/a&gt; that includes all of the scaffolding. I can &lt;code class=&quot;highlighter-rouge&quot;&gt;CD&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; folder, make an edit, and push my changes. I can see the website live on my localhost by running &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;. All of the links are relative to my localhost, so I now need to &lt;code class=&quot;highlighter-rouge&quot;&gt;export JEKYLL_ENV=production&lt;/code&gt; so that jekyll will produce links with my &lt;code class=&quot;highlighter-rouge&quot;&gt;http://bauerjj.github.io&lt;/code&gt; baseurl.&lt;/p&gt;

&lt;p&gt;This is where I encounter a &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/6057&quot;&gt;jekyll bug&lt;/a&gt; that causes a double slash (//) in place of where a single slash should be (/). For example, links will show up as &lt;code class=&quot;highlighter-rouge&quot;&gt;http://bauerjj.github.io//blog&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;http://bauerjj.github.io/blog&lt;/code&gt;. I followed &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/6057&quot;&gt;jira 6057&lt;/a&gt; and its proposed solution of using &lt;a href=&quot;https://github.com/jekyll/jekyll/pull/6058&quot;&gt;URLFilters&lt;/a&gt;, however I was not able to resolve my problem. I created a simple script instead that fixes the slashes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory by iteratiing through all of the files and performing a replace. My config has this: &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl                  : &quot;////&quot;&lt;/code&gt;. Notice how I put multiple slahes. This was so that the script could look for 5 slashes and do the replace since some valid &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; occur such as those in an &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&lt;/code&gt; url.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Small script that replaces \\\\\ with a single \ &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FILES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find ./ -type f -name &lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;file &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FILES&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
   &lt;/span&gt;sed -i -e &lt;span class=&quot;s1&quot;&gt;'s/\/\/\/\/\//\//g'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I then needed a method to monitor the source directory for any changes and then commit, push, and deploy the static content up to github for me. I used &lt;a href=&quot;https://github.com/nevik/gitwatch&quot;&gt;gitwatch&lt;/a&gt; and forked it so that I could customize it do run my &lt;code class=&quot;highlighter-rouge&quot;&gt;replace.sh&lt;/code&gt; script, copy the static contents to my production folder, and then commit/push everything to github. You can see my simple changes to the script &lt;a href=&quot;https://github.com/bauerjj/gitwatch/blob/master/gitwatch.sh&quot;&gt;on my own fork&lt;/a&gt;. Now, just execute &lt;code class=&quot;highlighter-rouge&quot;&gt;./gitwatch&lt;/code&gt; and watch it do its magic whenever you edit a source file!&lt;/p&gt;

&lt;p&gt;Please let me know if you have any problems.&lt;/p&gt;</content><author><name>Justin Bauer</name><email>justinjbauer1@gmail.com</email><uri>http://mcuhq.com</uri></author><summary type="html">The main benefit I see of using jekyll is being able to edit a plain markdown file and have it appear live on the Internet in just a few seconds. In order for this to happen, I have to perform the following:</summary></entry><entry><title type="html">Installing jekyll on Linux</title><link href="https://bauerjj.github.io/blog/install-jekyll-on-linux/" rel="alternate" type="text/html" title="Installing jekyll on Linux" /><published>2017-07-27T00:00:00-07:00</published><updated>2017-07-27T00:00:00-07:00</updated><id>https://bauerjj.github.io/blog/install-jekyll-on-linux</id><content type="html" xml:base="https://bauerjj.github.io/blog/install-jekyll-on-linux/">&lt;p&gt;I use &lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;jekyll&lt;/a&gt; on some of my projects to produce a static html web page, like this one. I can easily edit the source and have an OK looking frontend without doing much CSS work. I find myself googling a few things from the errors I get inside the terminal as I try to install jekyll and all the necessary components needed to serve my web page. Here is a condensed version of what needs to be installed to have your github page served locally.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install ruby gem ruby-dev ruby-bundler zlib1g-dev nodejs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install jekyll nokogiri&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, in your github pages repo, you can now run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/p&gt;</content><author><name>Justin Bauer</name><email>justinjbauer1@gmail.com</email><uri>http://mcuhq.com</uri></author><summary type="html">I use jekyll on some of my projects to produce a static html web page, like this one. I can easily edit the source and have an OK looking frontend without doing much CSS work. I find myself googling a few things from the errors I get inside the terminal as I try to install jekyll and all the necessary components needed to serve my web page. Here is a condensed version of what needs to be installed to have your github page served locally.</summary></entry><entry><title type="html">UD-3900 Pluggable Docking Station with Ubuntu Dual-Monitors</title><link href="https://bauerjj.github.io/blog/how-to-install-plugable-usb-3-0-docking-station-ubuntu/" rel="alternate" type="text/html" title="UD-3900 Pluggable Docking Station with Ubuntu Dual-Monitors" /><published>2017-07-11T01:03:00-07:00</published><updated>2017-07-11T01:03:00-07:00</updated><id>https://bauerjj.github.io/blog/how-to-install-plugable-usb-3-0-docking-station-ubuntu</id><content type="html" xml:base="https://bauerjj.github.io/blog/how-to-install-plugable-usb-3-0-docking-station-ubuntu/">&lt;p&gt;I struggled for a bit to get my &lt;a href=&quot;plugable.com/products/ud-3900/&quot;&gt;UD-3900&lt;/a&gt; working under Ubuntu MATE 16.04.2. Here are the steps I took:&lt;/p&gt;

&lt;p&gt;1) Ensure that the kernel is AT LEAST 4.8 by running &lt;code class=&quot;highlighter-rouge&quot;&gt;uname -r&lt;/code&gt;. I tried to downgrade my kernel to 4.4 after failing a few times to no avail.&lt;/p&gt;

&lt;p&gt;2) Update your system. &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get update&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get dist-upgrade&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;a href=&quot;http://www.displaylink.com/downloads/ubuntu&quot;&gt;Download the DisplayLink Driver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) If you haven’t already, install dkms &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install dkms&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5) &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod a+x displaylink-driver-xxxx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;6) &lt;code class=&quot;highlighter-rouge&quot;&gt;./displaylink-driver-xx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7) nano &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/X11/xorg.cong.d/20-displaylink.conf&lt;/code&gt;
   Paste this into that file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Section &quot;Device&quot; 
  Identifier &quot;Intel Graphics&quot;
  Driver &quot;intel&quot;
EndSection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;8) &lt;code class=&quot;highlighter-rouge&quot;&gt;reboot&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After a reboot, I had to wait 50 seconds before Ubuntu recognized the screens. If something went wrong, you can uninstall the driver &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo displaylink-installer uninstall&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;lsusb&lt;/code&gt; to see if the driver is installed or not.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://support.displaylink.com/knowledgebase/articles/1181623-displaylink-ubuntu-driver-after-recent-x-upgrades&quot;&gt;DisplyLink Troubleshoot Article&lt;/a&gt;&lt;/p&gt;</content><author><name>Justin Bauer</name><email>justinjbauer1@gmail.com</email><uri>http://mcuhq.com</uri></author><summary type="html">I struggled for a bit to get my UD-3900 working under Ubuntu MATE 16.04.2. Here are the steps I took:</summary></entry><entry><title type="html">Samsung Migration Tool Fail</title><link href="https://bauerjj.github.io/blog/samsung-migration-tool-fail/" rel="alternate" type="text/html" title="Samsung Migration Tool Fail" /><published>2017-05-12T01:03:00-07:00</published><updated>2017-05-12T01:03:00-07:00</updated><id>https://bauerjj.github.io/blog/samsung-migration-tool-fail</id><content type="html" xml:base="https://bauerjj.github.io/blog/samsung-migration-tool-fail/">&lt;p&gt;I tried the &lt;a href=&quot;http://www.samsung.com/semiconductor/minisite/ssd/download/tools.html&quot;&gt;Offical Samsung Data Migration Tool&lt;/a&gt; to clone one of the approved Samsung EVO series SSDs to a larger one so that I could use it in another laptop. I was met with an ambiguous error code of &lt;code class=&quot;highlighter-rouge&quot;&gt;-00001&lt;/code&gt; with some other text. It would never begin the process and would hang after 50 seconds of it transferring it. I then tried various other things that google suggested to me such as cleaning the recycle bin, deleting restore points and Windows Pagefile, and defragmenting. I suspected that the SATA-to-USB converter may have had a faulty chipset or something, however I ended up using another program called &lt;a href=&quot;https://www.macrium.com/reflectfree&quot;&gt;Macrium Reflect&lt;/a&gt; that worked! I simply used their free edition and a few clicks and 25 mins later, my 255 GIG SSD was transfered. I also tried another cloning program called &lt;a href=&quot;https://www.macrium.com/reflectfree&quot;&gt;MiniTool Partition Wizard&lt;/a&gt; which also failed.&lt;/p&gt;

&lt;p&gt;The one downside of Macrium is that is a fairly large download of a couple hundred MB. Other than that - worked great. All you have to do is click &lt;code class=&quot;highlighter-rouge&quot;&gt;Clone this Disk...&lt;/code&gt; and select your target and then begin. You will more than likely need to install additional hardware drivers on your new machine if you plan on placing the cloned SSD into a new laptop. You can get the drivers installed auto-magically from Dell which has become surprisingly streamlined since you can now download an auto-detection program that will download and install the drivers for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/macrium.png&quot; alt=&quot;Macrium Reflect working&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also note that I did a 1:1 clone that did NOT extend the existing partitions, meaning that I had to enter the disk manager on the new laptop after the transfer, right-click my NTFS partition and click “Extend Partition”. Now the unallocated space was moved to the primary partition.&lt;/p&gt;</content><author><name>Justin Bauer</name><email>justinjbauer1@gmail.com</email><uri>http://mcuhq.com</uri></author><summary type="html">I tried the Offical Samsung Data Migration Tool to clone one of the approved Samsung EVO series SSDs to a larger one so that I could use it in another laptop. I was met with an ambiguous error code of -00001 with some other text. It would never begin the process and would hang after 50 seconds of it transferring it. I then tried various other things that google suggested to me such as cleaning the recycle bin, deleting restore points and Windows Pagefile, and defragmenting. I suspected that the SATA-to-USB converter may have had a faulty chipset or something, however I ended up using another program called Macrium Reflect that worked! I simply used their free edition and a few clicks and 25 mins later, my 255 GIG SSD was transfered. I also tried another cloning program called MiniTool Partition Wizard which also failed.</summary></entry><entry><title type="html">Resizing Main Partition Using gparted in a VM</title><link href="https://bauerjj.github.io/blog/resizing-main-parition-using-gparted-in-a-vm/" rel="alternate" type="text/html" title="Resizing Main Partition Using gparted in a VM" /><published>2017-04-19T01:03:00-07:00</published><updated>2017-04-19T01:03:00-07:00</updated><id>https://bauerjj.github.io/blog/resizing-main-parition-using-gparted-in-a-vm</id><content type="html" xml:base="https://bauerjj.github.io/blog/resizing-main-parition-using-gparted-in-a-vm/">&lt;p&gt;If your main partition (&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda1&lt;/code&gt;) is filling up inside of your virtual machine, follow these steps to make it bigger inside of VMware Player&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Locate the originally downloaded Ubuntu download image (~1.2GIG) or download it again&lt;/li&gt;
  &lt;li&gt;In VMware player, right-click the image and goto settings. Select CD/DVD (SATA) and then browse for the ubuntu image under Connection. Check the Enable at PowerOn checkbox.&lt;/li&gt;
  &lt;li&gt;Power on the image and during the initial splash screen, press F2to enter the BIOS.&lt;/li&gt;
  &lt;li&gt;Change the boot sequence so that Boot From CD is first in queue.&lt;/li&gt;
  &lt;li&gt;Restart the VM and when the CD boots up, press &lt;code class=&quot;highlighter-rouge&quot;&gt;Try Ubuntu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Launch &lt;code class=&quot;highlighter-rouge&quot;&gt;gparted&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Temporarily remove the swap partition so that the unallocated region aligns with the first partition.&lt;/li&gt;
  &lt;li&gt;Resize the main partition (/dev/sda1) to include all of the space MINUS 1024 MB!&lt;/li&gt;
  &lt;li&gt;Create an logical partition at the end and make it as the swap space.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gparted.PNG&quot; alt=&quot;QtCreator Cross-Compiler&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure to right-click the swap partition and select “SwapOn”&lt;/li&gt;
  &lt;li&gt;Exit the live-cd and unmount the CD image inside of VMware player. You can leave the bios as is&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;converting-a-monolithic-image-to-multiple-separate-files&quot;&gt;Converting a monolithic image to multiple separate files&lt;/h2&gt;

&lt;p&gt;When creating a VM, you can either create a single file or multiple files. The single file is better for performance, while the multiple file setup is easier to expand in 2GIG increments. Read &lt;a href=&quot;https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;amp;cmd=displayKC&amp;amp;externalId=2006898&quot;&gt;this article&lt;/a&gt; and then download &lt;a href=&quot;https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;amp;cmd=displayKC&amp;amp;externalId=1023856&quot;&gt;vdisk-manager&lt;/a&gt; since it doesn’t come with VMPlayer and only Workstation in order to convert the large image into a lot of smaller separate files.&lt;/p&gt;</content><author><name>Justin Bauer</name><email>justinjbauer1@gmail.com</email><uri>http://mcuhq.com</uri></author><summary type="html">If your main partition (/dev/sda1) is filling up inside of your virtual machine, follow these steps to make it bigger inside of VMware Player</summary></entry><entry><title type="html">Speeding Up Native Compiling and Cross-Compiling Time with ccache</title><link href="https://bauerjj.github.io/blog/speeding-up-compilation-time-with-ccache/" rel="alternate" type="text/html" title="Speeding Up Native Compiling and Cross-Compiling Time with ccache" /><published>2017-04-13T01:03:00-07:00</published><updated>2017-04-13T01:03:00-07:00</updated><id>https://bauerjj.github.io/blog/speeding-up-compilation-time-with-ccache</id><content type="html" xml:base="https://bauerjj.github.io/blog/speeding-up-compilation-time-with-ccache/">&lt;p&gt;It took me years to finally realize that I could greatly speed up compilation time using a utility called &lt;code class=&quot;highlighter-rouge&quot;&gt;ccache&lt;/code&gt;.&lt;/p&gt;

&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#native-compiling&quot; id=&quot;markdown-toc-native-compiling&quot;&gt;Native Compiling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cross-compiling&quot; id=&quot;markdown-toc-cross-compiling&quot;&gt;Cross-Compiling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-qtcreator&quot; id=&quot;markdown-toc-setting-up-qtcreator&quot;&gt;Setting up QtCreator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;

&lt;p&gt;It is essentially a wrapper around your compiler, most likely g++, that caches the compiled objects from your source and saves them in your home directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;.ccache&lt;/code&gt; folder) so that subsequent builds with the &lt;em&gt;identical environment settings&lt;/em&gt; will use the cache. Not using it is pretty much wasting time. Sourcing an environment script that changes any compiler flags or targets that are different from the already compiled objects from the same source files in prior builds will inflict a “cache miss”.&lt;/p&gt;

&lt;p&gt;To install: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install ccache&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ccache&lt;/code&gt; includes the compiler name in the hash as shown in the &lt;a href=&quot;http://ccache.samba.org/manual.html#_common_hashed_information&quot;&gt;manual&lt;/a&gt;, making it safe for multiple architectures to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ccache&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;native-compiling&quot;&gt;Native Compiling&lt;/h2&gt;

&lt;p&gt;In your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_rc&lt;/code&gt; file or similar, place: &lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=/usr/lib/ccache:$PATH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;which gcc&lt;/code&gt; to ensure that it is pointing at ccache. The paths that show up first in the variable are parsed first - a “first come first served” situation.&lt;/p&gt;

&lt;p&gt;To verify operation and see the cache grow in size, start compiling something and invoke the following:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jbauer@ad-dell:~$ watch -n 1 ccache -s

Every 1.0s: ccache -s               Thu Apr 13 14:32:22 2017

cache directory                     /home/jbauer/.ccache
primary config                      /home/jbauer/.ccache/ccache.conf
secondary config      (readonly)    /etc/ccache.conf
cache hit (direct)                    56
cache hit (preprocessed)               0
cache miss                          1991
called for link                      369
no input file                          2
files in cache                      4217
cache size                         962.5 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can also just use this to print out the stats directly: &lt;code class=&quot;highlighter-rouge&quot;&gt;jbauer@ad-dell:~$ ccache -s&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;cross-compiling&quot;&gt;Cross-Compiling&lt;/h2&gt;
&lt;p&gt;Similar methodology can be used to have your cross-compilers utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;ccache&lt;/code&gt;. I’m usually using Yocto, which creates an SDK for your target and contains an environment script that I can then &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; and begin compilation for the embedded target.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install the Yocto supplied SDK after bitbaking it.&lt;/li&gt;
  &lt;li&gt;Open your environment script and find the name of your cross-compiler. My location was: &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/poky/2.1.2/environment-setup-cortexa9hf-neon-poky-linux-gnueabi&lt;/code&gt;. The compiler name is then found under the &lt;code class=&quot;highlighter-rouge&quot;&gt;export CC=&lt;/code&gt; line.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create two soft links in your &lt;code class=&quot;highlighter-rouge&quot;&gt;ccache&lt;/code&gt; directory&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ cd /usr/lib/ccache
 $ ln -s /usr/bin/ccache arm-poky-linux-gnueabi-g++ 
 $ ln -s /usr/bin/ccache arm-poky-linux-gnueabi-gcc 
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Re-open your environment script and prepend &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/ccache&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable. This ensures that your machine will first look in your &lt;code class=&quot;highlighter-rouge&quot;&gt;ccache&lt;/code&gt; directory for the compilers. Omitting this step will require you to manually export the PATH variable after sourcing the script or else &lt;code class=&quot;highlighter-rouge&quot;&gt;ccache&lt;/code&gt; will never do its job.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; export PATH=/usr/lib/ccache:/opt/poky/2.1.2/sysroot/....
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Verify your work&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ ls -al
 lrwxrwxrwx 1 root root 16 Apr 13 13:25 arm-poky-linux-gnueabi-g++ -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Apr 13 13:25 arm-poky-linux-gnueabi-gcc -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 c++ -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 c89-gcc -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 c99-gcc -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 cc -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 g++ -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 g++-5 -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 gcc -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 gcc-4.8 -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 gcc-5 -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 x86_64-linux-gnu-g++ -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 x86_64-linux-gnu-g++-5 -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 x86_64-linux-gnu-gcc -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 x86_64-linux-gnu-gcc-4.8 -&amp;gt; ../../bin/ccache
 lrwxrwxrwx 1 root root 16 Mar 21 12:24 x86_64-linux-gnu-gcc-5 -&amp;gt; ../../bin/ccache
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setting-up-qtcreator&quot;&gt;Setting up QtCreator&lt;/h2&gt;
&lt;p&gt;You can utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;ccache&lt;/code&gt; inside of QtCreator by selecting your native and cross-compiler links inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ccache&lt;/code&gt; directory. Below shows two screenshots of setting up my cross-compiler. Notice how I had to manually locate both gcc and g++ and instruct Qt what they are targeting. Your paths will differ slightly since I have my project defined as “Armadillo” or “ado”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kit-overall.png&quot; alt=&quot;QtCreator Cross-Compiler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gcc-ccache.png&quot; alt=&quot;QtCreator Cross-Compiler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Be sure to source your environment before launching QtCreator!&lt;/p&gt;</content><author><name>Justin Bauer</name><email>justinjbauer1@gmail.com</email><uri>http://mcuhq.com</uri></author><summary type="html">It took me years to finally realize that I could greatly speed up compilation time using a utility called ccache.</summary></entry><entry><title type="html">Hackster.io Phoenix - What Happened?</title><link href="https://bauerjj.github.io/blog/hackster-io-phoenix/" rel="alternate" type="text/html" title="Hackster.io Phoenix - What Happened?" /><published>2017-03-28T01:03:00-07:00</published><updated>2017-03-28T01:03:00-07:00</updated><id>https://bauerjj.github.io/blog/hackster-io-phoenix</id><content type="html" xml:base="https://bauerjj.github.io/blog/hackster-io-phoenix/">&lt;p&gt;I attended a &lt;a href=&quot;https://www.meetup.com/hacksterlivephx/events/227876099/&quot;&gt;meetup&lt;/a&gt; last April (April 2016) that featured using a &lt;a href=&quot;https://store.particle.io/collections/photon&quot;&gt;Particle Photon&lt;/a&gt; to communicate with a simple temp sensor. I was primarily interested in meeting new people in the scene and to finally use my photon that I purchased a few months prior.&lt;/p&gt;

&lt;p&gt;The meeting spot was selected to be at a location in Midtown, hosted by &lt;a href=&quot;https://cohoots.com/&quot;&gt;CO+HOOTS&lt;/a&gt;. The shared space turned out to be pretty awesome. CO+HOOTS provides a common area for like-minded individuals and companies to call their place home. For only $350/month, this seems tempting to sign up for, but I have no reason to do so at this time since I already work full-time. Maybe later in the future….&lt;/p&gt;

&lt;p&gt;An associate from CO+HOOTS showed a few of us a quick tour of their nice facility. They also provided some snacks. There were about 20 of us and mostly hobbyists. I expected most people to be versed in programming and electronics, but to my surprise this wasn’t really the case here as about 40% were first-time learners. &lt;a href=&quot;https://www.meetup.com/hacksterlivephx/members/14491872/&quot;&gt;Drew Alden&lt;/a&gt; is the “hackster Ambassador”, which is a liaison between the company HQ in San Francisco and his/her local “hackers”. I think their main task is to organize events and distribute sponsored material.&lt;/p&gt;

&lt;p&gt;Drew gave a short presentation on what &lt;a href=&quot;hackster.io&quot;&gt;Hackster.io&lt;/a&gt; is all about and how we can get involved. He urged us to push any projects that we do over to their website to win prizes and such. I didn’t have this intention, only to get my photon up and running. After following along with the instructions, I was able to get the photon connected to the wifi and have it update its firmware. I was then able to write some simple “Arduino-esque” code and have it blink an external LED using a GPIO pin. Having an IDE in the cloud was pretty neat and it contained some user submitted libraries to easily get common hardware working such as an RTC. Microchip Technology has recently begun rolling out their cloud-based IDE called &lt;a href=&quot;www.microchip.com/mplab/mplab-xpress&quot;&gt;MPLAB Xpress&lt;/a&gt;. It seems to be a common move now - cloud-based IDEs.&lt;/p&gt;

&lt;p&gt;I made exactly one friend at the end of things and had my photon working…so mission accomplished! I guess I parked in the wrong spot because I had a hand-written note on my car explaining that I could have been towed. Another reason why I don’t like living in a big city. The meetup group puts on another event that I was unable to attend, but then the events stop all together. It’s been almost 1 year now and no new events have shown up, yet membership keeps increasing! I wonder if hackster.io will hire another ambassador? Maybe I should look into being one? I’m not sure about the time commitment it takes to be one, however.&lt;/p&gt;</content><author><name>Justin Bauer</name><email>justinjbauer1@gmail.com</email><uri>http://mcuhq.com</uri></author><summary type="html">I attended a meetup last April (April 2016) that featured using a Particle Photon to communicate with a simple temp sensor. I was primarily interested in meeting new people in the scene and to finally use my photon that I purchased a few months prior.</summary></entry><entry><title type="html">Init - New Personal Space</title><link href="https://bauerjj.github.io/blog/init/" rel="alternate" type="text/html" title="Init - New Personal Space" /><published>2017-03-24T01:03:00-07:00</published><updated>2017-03-24T01:03:00-07:00</updated><id>https://bauerjj.github.io/blog/init</id><content type="html" xml:base="https://bauerjj.github.io/blog/init/">&lt;p&gt;This is my initial post on here. I don’t quite know how to use this space other than to blog about tech related material and other things on my mind that come up throughout the day. It may turn into a sudo-journal that I can reflect upon later. I also want to use this space to publicly share things like investing and the places I visit around Phoenix, AZ.&lt;/p&gt;

&lt;p&gt;I want to allow people to comment as always, however I don’t want to use disqus. I’m thinking of rehashing a PHP script that I bought on my other laravel site and using it to serve up the comments. Another project….&lt;/p&gt;</content><author><name>Justin Bauer</name><email>justinjbauer1@gmail.com</email><uri>http://mcuhq.com</uri></author><summary type="html">This is my initial post on here. I don’t quite know how to use this space other than to blog about tech related material and other things on my mind that come up throughout the day. It may turn into a sudo-journal that I can reflect upon later. I also want to use this space to publicly share things like investing and the places I visit around Phoenix, AZ.</summary></entry></feed>